---
- name: F5 BIG-IPS 
  hosts: lb
  gather_facts: False

  vars:
    cancelprecheck: false #F5 precheck 

    provider:
      password: "{{ ansible_ssh_pass }}"
      server: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      validate_certs: False
  
  tasks:
    
    - name: Pre-check 1 Grab the Virtual Server Status
      bigip_device_facts:
        gather_subset:
        - virtual-servers
        partition: "{{ item }}"
        provider: "{{provider}}"
      delegate_to: localhost
      register: bigip_facts              
      loop: "{{ partition_list }}"            

    - name: Get current time on BIG-IP
      command: date "+%H%M%S-%m%d%y"
      delegate_to: localhost
      register: date

    - name: Pre-check 2 Capture the Virtual Server stats in a .json file
      delegate_to: localhost
      set_fact:
        result: "{{bigip_facts | json_query(query_string)}}"
      vars:
        query_string: "results[].virtual_servers[].{Name: name, Status: availability_status,Full_Path: full_path,Destination: destination_address,Destination_Port: destination_port, Protocol: protocol,Pool: default_pool,Persistance: persistence_profile, Status_Reason: status_reason }"
    - local_action:
        module: copy
        content: "{{ result }}"
        dest: "outputs/pre-{{ansible_host}}-virtual-servers-outputs-{{date.stdout}}.json"

    - name: Pre-check 3 Generate F5 Virtual Server Status .html Page
      template:
        src: ./report/templates/report.j2
        dest: ./report/pre-check-f5.html
      run_once: true
      delegate_to: localhost

    - name: Get failover state
      shell: tmsh show sys failover | awk '{print $2}'s
      register: failover_state

    - name: Pre-check 4 Verify running configuration of the BIG-IP
      command: tmsh load sys config verify

    # - name: Reactivate BIG-IP with existing reg key
    #   shell: SOAPLicenseClient --basekey $(perl -ane 'print $F[3] if /^Registration Key/' /config/bigip.license)

    # - name: Wait for configuration to finish loading
    #   wait_for:
    #     timeout: 45
    #   delegate_to: localhost

    # - name: checking if image exist in BIGIP
    #   command: "cat /shared/images/{{image}} | awk '{print $2}'"
    #   register: image_present

    - name: Upload image to the BIG-IP
      command: "rsync --progress --verbose f5teg@po-repo-f5.poinfra.server.lan::f5images/{{image}} /shared/images/"
      #when: image != image_present

    - name: Get available volume number to use
      script: files/get_vol_number.bash
      register: vol

    - name: Install BIG-IP software
      bigip_software_install:
        image: "{{ image }}"
        state: activated
        volume: "{{ vol.stdout }}"
        provider: "{{ provider }}"
      delegate_to: localhost
      # async: 45
      # poll: 0
      # when: failover_state.stdout  == 'standby'

    - name: Post-Check 1 Grab the Virtual Server Status
      bigip_device_facts:
        gather_subset:
        - virtual-servers
        partition: "{{ item }}"
        provider: "{{provider}}"
      delegate_to: localhost  
      register: bigip_facts_post             
      loop: "{{ partition_list }}"            

    - name: Post-Check 2 Capture the Virtual Server stats in a .json file
      delegate_to: localhost
      set_fact:
        resultpost: "{{bigip_facts_post | json_query(query_string) }}"
      vars:
        query_string: "results[].virtual_servers[].{Name: name, Status: availability_status,Full_Path: full_path,Destination: destination_address,Destination_Port: destination_port, Protocol: protocol,Pool: default_pool,Persistance: persistence_profile, Status_Reason: status_reason }"
    - local_action:
        module: copy
        content: "{{ resultpost }}"
        dest: "outputs/post-{{ansible_host}}-virtual-servers-outputs-{{date.stdout}}.json"

    - name: Post-Check 3 Generate F5 Virtual Server Status .html Page
      template:
        src: ./report/templates/postreport.j2
        dest: ./report/post-check-f5.html
      delegate_to: localhost
      run_once: true